
    /**
     * Main function that solves a normal DFAGames
     * @param automaton the automaton
     * @param domain the domain of the original formula
     * @return true, if there exists a winning solution, false otherwise
     */
    public static boolean solveDFAGames(Automaton automaton,Domain domain){
        boolean result = false;
        Set<State> winningStates = new HashSet<>();
        winningStates.addAll(automaton.terminals());

        boolean cont = true;

        while (cont){
            /*
            This function uses this intuition:
                We can compute the possible winning states set by finding states that can
                take to a winning state
                Observing those state we have 3 possibilities:
                    1. the state is already a winning state
                    2. the state is a new winning state
                    3. the state is not a winning state
                If the state is already a winning state we can remove it from the possible winning states set
                If the state is a new winning state we can add it to the winning set
                If the state isn't winning we can remove it from the possible winning set.
                If at the end the possible winning state contains still some elements, this mean we've added a state to
                the winning set, and we must compute all this again
             */
            Set<State> possibleWinningStates = new HashSet<>();
	        possibleWinningStates.addAll(automaton.coAccessibleStates(winningStates));

            Object arr[] = possibleWinningStates.toArray();
            for (Object s:arr){
                State state = (State) s;
                if (winningStates.contains(state)) possibleWinningStates.remove(state);
                else {
                    if (haveObligedPath(automaton,state,winningStates,domain)) winningStates.add(state);
                    else possibleWinningStates.remove(state);
                }
            }
            if (possibleWinningStates.size()==0)cont = false;
        }

	    for (Object s:automaton.initials()) if (winningStates.contains(s)) result = true;
        return result;
    }

    /**
     * Used to compute is a state has a obliged path (every interpretation of the agents proposition take to a
     * winning state, no mather of the environments propositions) to a winning state
     * @param automaton the automaton
     * @param state the starting state
     * @param winningState set of winning states
     * @param domain domain of the original function
     * @return true if there is a obliged path, false otherwise
     */
    private static boolean haveObligedPath(Automaton automaton,State state,Set<State> winningState, Domain domain){
        Set<Set<Proposition>> environmentPATHS = domain.getCombinantionEnvironmentDomain();
        Set<Set<Proposition>> agentPATHS = domain.getCombinantionAgentsDomain();
        for (Set<Proposition> agentPath: agentPATHS){
            boolean isWinning = true;
            for (Set<Proposition> environmentPath:environmentPATHS){
                PossibleWorldWrap path = new PossibleWorldWrap();
                path.addAll(agentPath);
                path.addAll(environmentPath);
                Set<Transition> transitions = automaton.delta(state,path);
                for (Transition transition:transitions) if (!winningState.contains(transition.end()))isWinning = false;
            }
            if (isWinning) return true;
        }
        return false;
    }
